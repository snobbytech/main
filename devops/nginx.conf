worker_processes 1;
user nobody nogroup;
error_log /var/log/nginx/error.log warn;
pid /run/nginx.pid;

events {
  worker_connections 1024;
  accept_mutex off;
}

http {
  include mime.types;
  default_type application/octet-stream;
  access_log /var/log/nginx/access.log combined;
  sendfile on;

  upstream app_server {
    # For a TCP config
    server 127.0.0.1:8000 fail_timeout=0;
  }

  server {
    listen 443;
    ssl on;
    ssl_certificate /etc/letsencrypt/live/yclip.xyz/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/yclip.xyz/privkey.pem;


    client_max_body_size 100M;
    # This forwards http requests to https.  load balancer forwards this
    # back to us.  This was done under advice of
    # https://serverfault.com/questions/733166/redirect-all-http-traffic-to-https-when-using-the-https-load-balancer-on-googl
    if ($http_x_forwarded_proto = "http") { return 301 https://$host$request_uri; }
    keepalive_timeout 5;
    location / {
        try_files $uri @proxy_to_app;
    }
    location @proxy_to_app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;
      # We don't want ngx to do something clever with redirects, so we set the host: header above.
      proxy_redirect off;
      proxy_pass http://app_server;
    }
  }
  server {
    listen 80 default_server;
    client_max_body_size 100M;

    server_name _;
    return 301 https://$host$request_uri;

    # I am not doing stuff with the load balancer yet, so for now let's just try this basic rule.

    # This forwards http requests to https.  load balancer forwards this
    # back to us.  This was done under advice of
    # https://serverfault.com/questions/733166/redirect-all-http-traffic-to-https-when-using-the-https-load-balancer-on-googl
    #if ($http_x_forwarded_proto = "http") { return 301 https://$host$request_uri; }

    keepalive_timeout 5;
    location / {
        try_files $uri @proxy_to_app;
    }
    location @proxy_to_app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;
      # We don't want ngx to do something clever with redirects, so we set the host: header above.
      proxy_redirect off;
      proxy_pass http://app_server;
    }
  }

}
